class Solution {
  public:
    Node *reverse(Node *head){
        if(!head)return NULL;
        if(!head->next)return head;
        Node *nxtnode=head->next;
        Node *nxt=reverse(head->next);
        
        if(nxtnode){
            nxtnode->next=head;
            head->next=NULL;
        }
        
        return nxt;
    }
    Node* subLinkedList(Node* head1, Node* head2) {
        int cnt1=0,cnt2=0;
        Node *st1=head1;
        Node *st2=head2;
        int isGreater=-1; // 0 means st1 greater one means st2 greater
        while(st1&&st2){
            if(st1->data !=st2->data && isGreater==-1){
                isGreater=(st1->data > st2->data)?0:1;
            }
            st1=st1->next;
            st2=st2->next;
        }
        
        if(!st1 && !st2){
            if(isGreater==1){
                Node *tmp=head1;
                head1=head2;
                head2=tmp;
            }
        }
        else{
            if(st2){
                Node *tmp=head1;
                head1=head2;
                head2=tmp;
            }
        }
        head1=reverse(head1);
        head2=reverse(head2);
        
        Node *tmp1=head1,*tmp2=head2;
        int borrow=0;
        Node *dummy=NULL;
        while(tmp2){
            int a=tmp1->data-borrow;
            borrow=0;
            int b=tmp2->data;
            if(a<b){
                borrow=1;
                a+=10;
            }
            int diff=a-b;
            Node *newnode=new Node(diff);
            newnode->next=dummy;
            dummy=newnode;
            tmp1=tmp1->next;
            tmp2=tmp2->next;
        }
        
        
        while(tmp1){
            
            int diff=tmp1->data-borrow;
            borrow=0;
            if(diff<0){
                diff+=10;
                borrow=1;
            }
            Node *newnode=new Node(diff);
            newnode->next=dummy;
            dummy=newnode;
            tmp1=tmp1->next;
        }
        
        while(dummy && dummy->next && dummy->data==0)dummy=dummy->next;
        return dummy;
    }
};
