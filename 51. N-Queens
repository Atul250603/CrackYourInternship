class Solution {
public:
    bool isValid(vector<string>&tmp,int row,int col){
        for(int i=0;i<row;i++){
            if(tmp[i][col]=='Q')return false;
        }

        row--;
        int a=col-1;
        int b=col+1;
        while(row>=0){
            if(a>=0){
                if(tmp[row][a]=='Q')return false;
                a--;
            }

            if(b<tmp.size()){
                if(tmp[row][b]=='Q')return false;
                b++;
            }

            row--;
        }

        return true;
    }
    void solve(vector<vector<string>>&ans,int row,vector<string>&tmp){
       if(row>=tmp.size()){
        ans.push_back(tmp);
        return;
       }
       for(int col=0;col<tmp.size();col++){
            if(isValid(tmp,row,col)){
                tmp[row][col]='Q';
                solve(ans,row+1,tmp);
                tmp[row][col]='.';
            }
       } 

       return;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>tmp(n);
        for(int i=0;i<n;i++){
            string tmp1="";
            for(int j=0;j<n;j++){
                tmp1+='.';
            }
            tmp[i]=tmp1;
        }
        solve(ans,0,tmp);
        return ans;
    }
};
