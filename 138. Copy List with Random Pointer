/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        // unordered_map<Node*,Node*>mp; //map of old node to random node
        // unordered_map<Node*,Node*>mp; //map of old node to new node
        // Node *dummy=new Node(0);
        // Node *tmp=dummy;
        // Node *tmp1=head;
        // while(tmp1){
        //     tmp->next=new Node(tmp1->val);
        //     tmp=tmp->next;
        //     mp[tmp1]=tmp;
        //     tmp1=tmp1->next;
        // }

        // tmp=dummy->next;
        // tmp1=head;
        // while(tmp1){
        //     Node *random=tmp1->random;
        //     if(random){
        //         Node *val=mp[random];
        //         tmp->random=val;
        //     }
        //     tmp=tmp->next;
        //     tmp1=tmp1->next;
        // }
        // return dummy->next;


        Node *tmp=head;
        while(tmp){
            Node *nxt=tmp->next;
            tmp->next=new Node(tmp->val);
            tmp->next->next=nxt;
            tmp=nxt;
        }
        tmp=head;
        Node *ans=new Node(0);
        Node *tmp1=ans;
        while(tmp){
            if(tmp->random){
                tmp->next->random=tmp->random->next;
            }
            else{
                 tmp->next->random=NULL;
            }
            tmp=tmp->next->next;
        }
        tmp=head;
        while(tmp){
            tmp1->next=tmp->next;
            tmp1=tmp->next;
            if(tmp->next)
                tmp->next=tmp->next->next;
            tmp=tmp->next;
        }
        return ans->next;
    }
};
