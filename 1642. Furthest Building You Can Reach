class Solution {
public:
    int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
        priority_queue<int>pq;
        int i=1,diff=0;
        while(i<heights.size()){
            diff=(heights[i]-heights[i-1]);
            if(diff<=0){i++;continue;}

            bricks-=diff;
            pq.push(diff); //no of brick consumed

            if(bricks<0){ //to fullfill this particular diff we need more bricks and we get them from earlier max diff by using ladder there if any
                bricks+=pq.top();
                pq.pop();
                ladders--;
            }

            if(ladders<0)break;

            i++;
        }

        return i-1;
    }
};
