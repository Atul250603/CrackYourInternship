class Solution {
public:
    const int MOD = 1e9 + 7;  // Use a large prime number to prevent overflow
    
    int solve(string &s, string &t) {
        vector<long long> curr(t.length() + 1, 0);
        curr[t.length()] =1;

        for (int i = s.length() - 1; i >= 0; i--) {
            curr[t.length()] = 1;
            for (int j = 0; j < t.length(); j++) {
                long long take = 0, notTake = 0;
                if (s[i] == t[j]) {
                    take = curr[j + 1];
                }
                notTake = curr[j];
                curr[j] = (take + notTake) % MOD;
            }
           
        }

        return curr[0];
    }

    int numDistinct(string s, string t) {
        return solve(s, t);
    }
};
