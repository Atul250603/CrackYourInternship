/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,vector<int>>mp;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        while(!q.empty()){
            int n=q.size();
            unordered_map<int,vector<int>>mp1;
            for(int i=0;i<n;i++){
                auto front=q.front();
                q.pop();
                TreeNode *node=front.first;
                int val=front.second;
                mp1[val].push_back(node->val);
                if(node->left){
                    q.push({node->left,val-1});
                }
                if(node->right){
                    q.push({node->right,val+1});
                }
            }

            for(auto val:mp1){
                sort(val.second.begin(),val.second.end());
                for(auto val1:val.second){
                    mp[val.first].push_back(val1);
                }
            }
        }

        vector<vector<int>>ans;
        for(auto val:mp){
            ans.push_back(val.second);
        }

        return ans;


    }
};
