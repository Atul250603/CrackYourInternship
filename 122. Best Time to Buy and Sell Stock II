class Solution {
public:
    // int solve(vector<int>&prices,int i, bool buy,vector<vector<int>>&dp){
    //     if(i>=prices.size())return 0;
    //     if(dp[i][buy]!=-1)return dp[i][buy];
    //     if(buy){
    //         return dp[i][buy]=max(-prices[i]+solve(prices,i,0,dp), solve(prices,i+1,1,dp));
    //     }
    //     else{
    //         return dp[i][buy]=max(prices[i]+solve(prices,i+1,1,dp), solve(prices,i+1,0,dp));
    //     }
    //     return dp[i][buy]=0;
    // }

    int bottomup(vector<int>&prices){
        vector<int>curr(2,0);
        vector<int>next(2,0);
        for(int i=prices.size()-1;i>=0;i--){
            for(int buy=0;buy<2;buy++){
                if(buy){
                    curr[buy]=max(-prices[i]+curr[0], next[1]);
                }
                else{
                    curr[buy]=max(prices[i]+next[1], next[0]);
                }
            }
            next=curr;
        }
        return next[1];
    }
    int maxProfit(vector<int>& prices) {
        // vector<vector<int>>dp(prices.size(),vector<int>(2,-1));
        int ans=bottomup(prices);
        return ans;
    }
};
