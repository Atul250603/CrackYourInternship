class Solution {
public:
    int findParent(vector<int>&parent,int node){
        if(node==parent[node])return node;
        return parent[node]=findParent(parent,parent[node]);
    }
    bool unionBySize(vector<int>&parent,vector<int>&size,int u,int v){
        int pu=findParent(parent,u);
        int pv=findParent(parent,v);
        if(pu==pv)return true;
        if(size[pu]>=size[pv]){
            size[pu]+=size[pv];
            parent[pv]=pu;
        }
        else{
            size[pv]+=size[pu];
            parent[pu]=pv;
        }
        return false;
    }
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n=edges.size();
        vector<int>parent(n+1,0);
        vector<int>size(n+1,1);
        for(int i=1;i<=n;i++){
            parent[i]=i;
        }
        vector<int>ans;
        for(int i=0;i<edges.size();i++){
            int u=edges[i][0];
            int v=edges[i][1];
            if(unionBySize(parent,size,u,v)){
                ans={u,v};
            }
        }
        return ans;
    }
};
