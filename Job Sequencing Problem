bool comp(Job &a1,Job &a2){
    return a1.dead>a2.dead;
}
class Solution 
{
    public:
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr,arr+n,comp);
        
        // for(int i=0;i<n;i++){
        //     cout<<arr[i].dead<<" ";
        // }
        // cout<<endl;
        priority_queue<pair<int,int>>pq;
        
        int dead=arr[0].dead;
        int i=0;
        int profit=0;
        int cnt=0;
        while(i<n){
            if(arr[i].dead==dead){
                pq.push({arr[i].profit,arr[i].dead});
            }
            else{
                profit+=pq.top().first;
                cnt++;
                pq.pop();
                int diff=dead-arr[i].dead-1;
                while(!pq.empty() && diff){
                    profit+=pq.top().first;
                    cnt++;
                    pq.pop();
                    diff--;
                }
                
                
                pq.push({arr[i].profit,arr[i].dead});
                dead=arr[i].dead;
            }
            i++;
        }
        
        if(!pq.empty()){
            profit+=pq.top().first;
            cnt++;
            pq.pop();
            int diff=dead-1;
            while(!pq.empty() && diff){
                profit+=pq.top().first;
                cnt++;
                pq.pop();
                diff--;
            }
                
        }
        vector<int>ans{cnt,profit};
        return ans;
        
    } 
};
