/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void findNodes(TreeNode *root,int k,vector<int>&ans,int dist){
        if(!root)return;
        if(k==dist){
            ans.push_back(root->val);
            return;
        }

        findNodes(root->left,k,ans,dist+1);
        findNodes(root->right,k,ans,dist+1);
    }
    int solve(TreeNode* root, TreeNode* target, int k, vector<int>&ans){
        if(!root)return 1e9;
        if(root==target){
            findNodes(root,k,ans,0);
            return 0;
        }
        else{
            int left=solve(root->left,target,k,ans);
            int right=solve(root->right,target,k,ans);
            if((left+1)<=k){
                if((left+1)==k){
                    ans.push_back(root->val);
                }
                else{
                    findNodes(root->right,k,ans,left+2);
                }
                return left+1;
            }
            else if((right+1)<=k){
                 if((right+1)==k){
                    ans.push_back(root->val);
                    
                }
                else{
                    findNodes(root->left,k,ans,right+2);
                }
                return right+1;
            }
            else{
                return 1e9;
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>ans;
        solve(root,target,k,ans);
        return ans;
    }
};
