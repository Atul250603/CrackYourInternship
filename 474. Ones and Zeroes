class Solution {
public:
    // int solve(vector<pair<int,int>>&arr,int m,int n,int i,vector<vector<vector<int>>>&dp){
    //     if(i>=arr.size()){
    //         return 0;
    //     }
    //     if(dp[i][m][n]!=-1)return dp[i][m][n];
    //     int take=0,notTake=0;
    //     if(arr[i].first<=m && arr[i].second<=n){
    //         take=1+solve(arr,m-arr[i].first,n-arr[i].second,i+1,dp);
    //     }
    //     notTake=solve(arr,m,n,i+1,dp);
    //     return dp[i][m][n]=max(take,notTake);
    // }
    int solve(vector<pair<int,int>>&arr,int &m,int &n){
        vector<vector<int>>curr(m+1,vector<int>(n+1,0));
        vector<vector<int>>next(m+1,vector<int>(n+1,0));
        for(int i=arr.size()-1;i>=0;i--){
            for(int j=0;j<=m;j++){
                for(int k=0;k<=n;k++){
                    int take=0,notTake=0;
                    if(arr[i].first<=j && arr[i].second<=k){
                        take=1+next[j-arr[i].first][k-arr[i].second];
                    }
                    notTake=next[j][k];
                    curr[j][k]=max(take,notTake);
                }
            }
            next=curr;
        }
        return next[m][n];
    }
    int findMaxForm(vector<string>& strs, int m, int n) {
        vector<pair<int,int>>arr(strs.size());
        for(int i=0;i<strs.size();i++){
            int cnt1=0,cnt2=0;
            for(int j=0;j<strs[i].length();j++){
                if(strs[i][j]=='0')cnt1++;
                else cnt2++;
            }
            arr[i]={cnt1,cnt2};
        }
        return solve(arr,m,n);
    }
};
