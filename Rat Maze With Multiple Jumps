class Solution {
public:
    bool solve(vector<vector<int>>&matrix,vector<vector<int>>&mark,vector<vector<int>>&ans,int steps,int &anssteps,int i,int j){
        int m=matrix.size();
        int n=matrix.size();
        if(i==(m-1) && j==(n-1)){
            
            // for(auto val:mark){
            //         for(auto val1:val){
            //             cout<<val1<<" ";
            //         }
            //         cout<<endl;
            // }
            
            // cout<<"-------------------------"<<endl;
            
            if(steps<anssteps){
                ans=mark;
                anssteps=steps;
            }
            return true;
        }
        
       
        
        for(int k=1;k<=matrix[i][j];k++){
            int newj=j+k;
            if( newj>=0 && newj<n && matrix[i][newj]  || (newj==n-1 && i==m-1)){
                
                mark[i][newj]=1;
                if(solve(matrix,mark,ans,steps+k,anssteps,i,newj))return true;
                mark[i][newj]=0;
            }
            
            
            
            
            int newi=i+k;
            if(newi>=0 &&  newi<m && matrix[newi][j] || (newi==m-1 && j==n-1)){
                
                mark[newi][j]=1;
                if(solve(matrix,mark,ans,steps+k,anssteps,newi,j))return true;
                mark[newi][j]=0;
            }
            // else if(matrix[i][newj]==0){
            //     break;
            // }
        }
        
        
         return false;
        
    }
	vector<vector<int>> ShortestDistance(vector<vector<int>>&matrix){
	    int m=matrix.size();
	    int n=matrix[0].size();
	    
	    vector<vector<int>>ans;
	    vector<vector<int>>mark(matrix.size(),vector<int>(matrix[0].size(),0));
	    mark[0][0]=1;
	    ans=mark;
	    int steps=0;
	    int anssteps=INT_MAX;
	    solve(matrix,mark,ans,steps,anssteps,0,0);
	    
	    if(anssteps==INT_MAX){
	        return {{-1}};
	    }
	    
	    return ans;
	    
	}

};
