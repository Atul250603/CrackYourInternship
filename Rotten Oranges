class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int,pair<int,int>>>q;
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==2){
                    q.push({0,{i,j}});
                }
            }
        }
        vector<pair<int,int>>dir{{-1,0},{0,1},{1,0},{0,-1}};
        int finalTime=0;
        while(!q.empty()){
            int n=q.size();
            for(int l=0; l<n; l++){
                auto front=q.front();
                q.pop();
                int time=front.first;
                int i=front.second.first;
                int j=front.second.second;
                for(int k=0;k<4;k++){
                    int newi=i+dir[k].first;
                    int newj=j+dir[k].second;
                    if(newi>=0 && newj>=0 && newi<grid.size() && newj<grid[0].size() && grid[newi][newj]==1){
                        finalTime=time+1;
                        q.push({time+1,{newi,newj}});
                        grid[newi][newj]=2;
                    }
                }
            }
        }
        
        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==1)return -1;
            }
        }
        
        return finalTime;
        
    }
};
