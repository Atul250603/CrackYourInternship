class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
       //one approach is using pq
       //question is like we want to find min element and then in the rem array ahead of this element we find the next mini and go on considering we must have k elements
       //so one thing we want to have inc sequence why? we want to build the smallest sequence so , always i+1 will be >= i that is inc

       //so if we have an element that is smaller than stack top and also we have enough element to fullfill k 
       //we start poppping element from stack

       //why stack, bcz we dependss on the prev elements


       stack<int>s;

       for(int i=0;i<nums.size();i++){

            while(!s.empty() && s.top()>nums[i] && nums.size()-i > k-s.size())s.pop();

            if(s.size()<k)s.push(nums[i]);
       }

       vector<int>ans;

       while(!s.empty()){
        ans.push_back(s.top());
        s.pop();
       }

       reverse(ans.begin(),ans.end());
       return ans;
    }
};
