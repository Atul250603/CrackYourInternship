class Solution {
public:
    int findParent(vector<int>&parent,int node){
        if(node==parent[node])return node;
        return parent[node]=findParent(parent,parent[node]);
    }
    int unionBySize(vector<int>&parent,vector<int>&size,int u,int v){
        int pu=findParent(parent,u);
        int pv=findParent(parent,v);
        if(pu==pv)return 1;
        if(size[pu]>=size[pv]){
            size[pu]+=size[pv];
            parent[pv]=pu;
        }
        else{
            size[pv]+=size[pu];
            parent[pu]=pv;
        }
        return 0;
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<int>parent(n,0);
        vector<int>size(n,1);
        for(int i=0;i<n;i++){
            parent[i]=i;
        }
        int extraEdges=0;
        for(int i=0;i<connections.size();i++){
            int u=connections[i][0];
            int v=connections[i][1];
            extraEdges+=unionBySize(parent,size,u,v);
        }
        int uniqueComponent=0;
        for(int i=0;i<n;i++){
            if(parent[i]==i)uniqueComponent++;
        }
        uniqueComponent--;
        if(uniqueComponent<=extraEdges)return uniqueComponent;
        return -1;
    }
};
