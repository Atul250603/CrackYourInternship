class Solution {
  public:
    void solve(vector<vector<int>>&mat,int i,int j,vector<string>&ans,string &temp){
        if(i<0 || j<0 || i>=mat.size() || j>=mat[0].size())return;
        if(!mat[i][j])return;
        if(i==(mat.size()-1) && j==(mat[0].size()-1)){
            if(mat[i][j]==1){
                ans.push_back(temp);
            }
            return;
        }
        mat[i][j]=0;
        temp+="D";
        solve(mat,i+1,j,ans,temp);
        temp.pop_back();
        temp+="U";
        solve(mat,i-1,j,ans,temp);
        temp.pop_back();
        temp+="L";
        solve(mat,i,j-1,ans,temp);
        temp.pop_back();
        temp+="R";
        solve(mat,i,j+1,ans,temp);
        temp.pop_back();
        mat[i][j]=1;
    }
    vector<string> findPath(vector<vector<int>> &mat) {
        int n=mat.size()-1;
        int m=mat[0].size()-1;
        // if(mat[0][0]==0)return {};
        // if(mat[n-1][m-1]==0)return {};
        vector<string>ans;
        string temp="";
        solve(mat,0,0,ans,temp);
        return ans;
    }
};
