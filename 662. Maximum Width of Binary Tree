/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        queue<pair<TreeNode*,long long int>>q;
        q.push({root,0});
        int ans=0;
        while(!q.empty()){
            int n=q.size();
            auto front=q.front();
            auto back=q.back();
            ans=max(ans,(int)(back.second-front.second)+1);
            for(int i=0;i<n;i++){
                auto f=q.front();
                q.pop();
                long long int offset=f.second-front.second;
                if(f.first->left){
                    q.push({f.first->left,(long long int)((2*offset*1LL)+1)});
                }
                if(f.first->right){
                    q.push({f.first->right,(long long int)((2*offset*1LL)+2)});
                }
            }
        }
        return ans;
    }
};
