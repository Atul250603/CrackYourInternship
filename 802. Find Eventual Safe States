class Solution {
public:
    bool solve(vector<vector<int>>&graph,int i, vector<int>&visited){
        visited[i]=1;
        for(auto val:graph[i]){
            if(!visited[val]){
                if(!solve(graph,val,visited))return false;
            }
            else{
                if(visited[val]!=2)return false;
            }
        }
        return visited[i]=2;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n=graph.size();
        vector<int>visited(n,0);
        for(int i=0;i<n;i++){
            if(!visited[i]){
                solve(graph,i,visited);
            }
        }
        vector<int>finalAns;
        for(int i=0;i<n;i++){
            if(visited[i]==2){
                finalAns.push_back(i);
            }
        }
        return finalAns;
    }
};
