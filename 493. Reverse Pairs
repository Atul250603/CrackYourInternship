class Solution {
public:
    void merge(vector<int>&temp,int i,int mid,int j,int &ans){
        vector<int>a;
        vector<int>b;

        for(int t=i;t<=mid;t++){
            a.push_back(temp[t]);
        }
        for(int t=mid+1;t<=j;t++){
            b.push_back(temp[t]);
        }

        int k=0,l=0,m=i;
        while(k<a.size() && l<b.size()){
            long long x=(long long int)a[k];
            long long y=(long long int)(b[l]*1LL)*2;;
            if(x>y){
                ans+=(b.size()-l);
                k++;
            }
            else{
                l++;
            }

        }

        k=0,l=0,m=i;

        while(k<a.size() && l<b.size()){
            if(a[k]>b[l]){
                temp[m++]=a[k++];
            }
            else{
                temp[m++]=b[l++];
            }
        }

        while(k<a.size()){
             temp[m++]=a[k++];
        }

        while(l<b.size()){
            temp[m++]=b[l++];
        }
        
    }
    void mergeSort(vector<int>&tmp,int i,int j,int &ans){
        if(i>=j)return;

        int mid=(i+j)/2;

        mergeSort(tmp,i,mid,ans);
        mergeSort(tmp,mid+1,j,ans);

        merge(tmp,i,mid,j,ans);
    }
    int reversePairs(vector<int>& nums) {
        //divide and conquer using sorting 
        int ans=0;
        mergeSort(nums,0,nums.size()-1,ans);
        return ans;
    }
};
